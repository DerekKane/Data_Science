library(ggmap)
library(mapproj)
get_googlemap(urlonly = TRUE)
ggmap(get_googlemap())
d <- function(x=-95.36, y=29.76, n,r,a){
round(data.frame(
lon = jitter(rep(x,n), amount = a),
lat = jitter(rep(y,n), amount = a)
), digits = r)
}
df <- d(n=50,r=3,a=.3)
map <- get_googlemap(markers = df, scale = 2)
ggmap(map)
ggmap(map, fullpage = TRUE) +
geom_point(aes(x = lon, y = lat), data = df, size = 3, colour = "black")
library(scales) # for muted graphics
str(crime)
data<-crime
View(data)
violent_crimes <- subset(crime, ((offense != "auto theft")
& (offense != "theft")
& (offense != "burglary")))
# rank violent crimes
violent_crimes$offense <- factor(violent_crimes$offense
, levels = c("robbery", "aggravated assault"
, "rape", "murder"))
violent_crimes <- subset(violent_crimes, ((-95.39681 <= lon)
& (lon <= -95.34188)
& (29.73631 <= lat)
& (lat <= 29.784)))
map <- get_map( location = "Houston TX"
, zoom = 14
, maptype = "roadmap"
, color = "bw" # make black & white so color is data
)
p <- ggmap(map)
p <- p + geom_point(data = violent_crimes
, aes(x = lon, y = lat, size = offense, colour = offense))
p <- p + theme( legend.position = c(0.0, 0.7) # put the legend inside the plot area
, legend.justification = c(0, 0)
, legend.background = element_rect(colour = F, fill = "white")
, legend.key = element_rect(fill = F, colour = F)
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
print(p)
p <- ggmap(map)
overlay <- stat_density2d(data = violent_crimes
, aes(x = lon, y = lat, fill = ..level.. , alpha = ..level..)
, size = 2, bins = 4, geom = "polygon")
p <- p + overlay
p <- p + scale_fill_gradient2("Violent Crime Density", low = "white", mid = "yellow", high = "red")
p <- p + scale_alpha(range = c(0.4, 0.75), guide = FALSE)
p <- p + guides(fill = guide_colorbar(barwidth = 1.5, barheight = 10))
#p <- p + inset(grob = ggplotGrob(ggplot() + overlay + theme_inset())
# , xmin = -95.35836, xmax = Inf, ymin = -Inf, ymax = 29.75062)
print(p)
p <- p + facet_wrap( ~ day, nrow = 2)
print(p)
get.variables(lprec)
library(lpSolveAPI);
mydata <- read.csv("C:/Users/Derek/Documents/R Scripts/Optimization/tiny_example_data.csv")
mydata$MaxPrice <- NULL
mydata$MinPrice <- NULL
mydata$MaxPrice <- mydata$CurrPrice*1.10
mydata$MinPrice <- if (mydata$CurrPrice*0.90 > mydata$CurrPrice-(mydata$CurrPrice*mydata$CurrProfit)){
mydata$CurrPrice*0.90
} else {
mydata$CurrPrice-(mydata$CurrPrice*mydata$CurrProfit)
}
library(lpSolveAPI);
View(mydata)
tab<-data.frame(Part=mydata$PRODUCT,
Curr.Vol=mydata$CurrVol,
Curr.Price=mydata$CurrPrice,
Curr.Profit=mydata$CurrProfit,
Max.price=mydata$MaxPrice,
);
tab <- data.frame(tab$Part=mydata$PRODUCT,
tab$Curr.Vol=mydata$CurrVol,
tab$Curr.Price=mydata$CurrPrice,
tab$Curr.Profit=mydata$CurrProfit,
tab$Max.price=mydata$MaxPrice,
);
tab <- data.frame(Part=mydata$PRODUCT,
Curr.Vol=mydata$CurrVol,
Curr.Price=mydata$CurrPrice,
Curr.Profit=mydata$CurrProfit,
Max.price=mydata$MaxPrice
);
View(tab)
numProds=length(tab$Curr.Price);
minp=tab$Curr.Price;
for(i in 1:numProds){
if(minp[i]*0.9<(1-tab$Curr.Profit[i])*minp[i]){minp[i]<-(1-tab$Curr.Profit[i])*minp[i]}
else{minp[i]<-minp[i]*0.9}
};
View(mydata)
tab$Min.price<-minp;
View(tab)
ProdVec=seq(from = 1,  to = numProds, by = 1);
L_const_names = paste(ProdVec, "Lower Constraint");
U_const_names = paste(ProdVec, "Upper Constraint");
L_const_names = c(L_const_names, "Overall Lower");
U_const_names = c(U_const_names, "Overall Upper");
NumConstraints=2*numProds+2;
#build empty RowNames Vector
RowNames<-vector(mode="character", length=NumConstraints);
View(tab)
#assign constraing Names
for (i in 1:NumConstraints) {
if (i%%2 == 0){
RowNames[i]=U_const_names[i/2]
} else{
RowNames[i]=L_const_names[floor(i/2)+1]
}
}
lprecH <- make.lp(0, dim(tab)[1]);
set.objfn(lprecH, tab$Curr.Vol);
View(tab)
for (i in 1:dim(tab)[1] ) {
vec<-seq(1, dim(tab)[1] )*0
vec[i]=1
add.constraint(lprecH, vec, ">=", tab$Min.price[i])
add.constraint(lprecH, vec, "<=", tab$Max.price[i])
};
overallmax=sum(tab$Curr.Price*tab$Curr.Vol)*(1+as.numeric(maxPriceLvl));
maxPriceLvl <- 0.04
minPriceLvl <- 0.02
obj <- "max"
overallmax=sum(tab$Curr.Price*tab$Curr.Vol)*(1+as.numeric(maxPriceLvl));
overallmin=sum(tab$Curr.Price*tab$Curr.Vol)*(1+as.numeric(minPriceLvl));
add.constraint(lprecH, tab$Curr.Vol, "<=", overallmax);
add.constraint(lprecH, tab$Curr.Vol, ">=", overallmin);
lp.control(lprecH,sense=Obj);
Obj <- "max"
lp.control(lprecH,sense=Obj);
ColNames<-paste("Product", ProdVec);
dimnames(lprecH) <- list(RowNames, ColNames);
print(lprecH)
solve(lprecH);
get.objective(lprecH);
get.variables(lprecH);
par(mfrow=c(3,2));
rev<-c(sum(tab$Curr.Price*tab$Curr.Vol), get.objective(lprecH));
bp<-barplot(rev, main="Overall Revenue Change",  names=c("Current", "Proposed"), horiz=TRUE,
xlab=paste("overall revenue change: ", sprintf("%.2f%%", (rev[2]/rev[1]-1)*100)));
text(bp, 0, sprintf("$%.2f",rev), horiz=TRUE, cex=1, pos=3);
par(mfrow=c(1,1));
rev<-c(sum(tab$Curr.Price*tab$Curr.Vol), get.objective(lprecH));
bp<-barplot(rev, main="Overall Revenue Change",  names=c("Current", "Proposed"), horiz=TRUE,
xlab=paste("overall revenue change: ", sprintf("%.2f%%", (rev[2]/rev[1]-1)*100)));
text(bp, 0, sprintf("$%.2f",rev), horiz=TRUE, cex=1, pos=3);
currrevbypart<-tab$Curr.Price*tab$Curr.Vol
proprevbypart<-get.variables(lprecH)*tab$Curr.Vol
barplot(as.matrix(cbind(currrevbypart, proprevbypart)), col=rainbow(numProds), horiz=TRUE, main="Overall Revenue Change by SKU",
names=c("Current", "Proposed"), xlab=paste("overall revenue change: ", sprintf("%.2f%%", (rev[2]/rev[1]-1)*100)))
legend("center", fill=rainbow(numProds), horiz=TRUE, title="SKU", legend=tab$Part)
partname<-matrix(tab$Part);
pricebypartcurr<- tab$Curr.Price;
pricebypartprop<-get.variables(lprecH);
pricebypart<-c(pricebypartcurr, pricebypartprop);
bp2curr<-barplot(pricebypartcurr, main="Price by SKU--Current", names=c(partname), xlab="SKU Number", col=rainbow(numProds));
text(bp2curr, 0, sprintf("$%.2f", pricebypartcurr), cex=1, pos=3);
pricechgbypart<-c(pricebypartprop-pricebypartcurr);
bp3<-barplot(pricechgbypart, main="Price Change by SKU ($)", names=c(partname), xlab="SKU Number", col=rainbow(numProds));
text(bp3, 0, sprintf("$%.2f", pricechgbypart), cex=1, pos=3);
bp2prop<-barplot(pricebypartprop,  names=c(partname), main="Price by SKU--Proposed", xlab="SKU Number", col=rainbow(numProds));
text(bp2prop, 0, sprintf("$%.2f", pricebypartprop), cex=1, pos=3);
pricechgbypart2<-c((pricebypartprop/pricebypartcurr-1)*100);
bp4<-barplot(pricechgbypart2, main="Price Change by SKU (%)", names=c(partname), xlab="SKU Number", col=rainbow(numProds));
text(bp4, 0, sprintf("%.0f%%", pricechgbypart2), cex=1, pos=3);
print(rev);
out<-cbind(tab, get.variables(lprecH));
View(out)
return(list(output=out, model=lprecH));
mydata <- read.csv("C:/Users/Derek/Documents/R Scripts/Optimization/tiny_example_data.csv")
mydata$MaxPrice <- NULL
mydata$MinPrice <- NULL
mydata$MaxPrice <- mydata$CurrPrice*1.10
mydata$MinPrice <- if (mydata$CurrPrice*0.90 > mydata$CurrPrice-(mydata$CurrPrice*mydata$CurrProfit)){
mydata$CurrPrice*0.90
} else {
mydata$CurrPrice-(mydata$CurrPrice*mydata$CurrProfit)
}
mydata$MaxPrice <- mydata$CurrPrice*1.10
maxPriceLvl <- 0.04
minPriceLvl <- 0.02
Obj <- "max"
library(lpSolveAPI);
PriceOpt<-function(tab, SKUs, CurrVol, CurrPrice, CurrProfit, minPriceLvl, maxPriceLvl, Obj){
tab <- data.frame(Part=mydata$PRODUCT,
Curr.Vol=mydata$CurrVol,
Curr.Price=mydata$CurrPrice,
Curr.Profit=mydata$CurrProfit,
Max.price=mydata$MaxPrice
);
numProds=length(tab$Curr.Price);
#calculate min price
minp=tab$Curr.Price;
for(i in 1:numProds){
if(minp[i]*0.9<(1-tab$Curr.Profit[i])*minp[i]){minp[i]<-(1-tab$Curr.Profit[i])*minp[i]}
else{minp[i]<-minp[i]*0.9}
};
tab$Min.price<-minp;
#Create constraing labels
ProdVec=seq(from = 1,  to = numProds, by = 1);
L_const_names = paste(ProdVec, "Lower Constraint");
U_const_names = paste(ProdVec, "Upper Constraint");
L_const_names = c(L_const_names, "Overall Lower");
U_const_names = c(U_const_names, "Overall Upper");
NumConstraints=2*numProds+2;
#build empty RowNames Vector
RowNames<-vector(mode="character", length=NumConstraints);
#assign constraing Names
for (i in 1:NumConstraints) {
if (i%%2 == 0){
RowNames[i]=U_const_names[i/2]
} else{
RowNames[i]=L_const_names[floor(i/2)+1]
}
}
lprecH <- make.lp(0, dim(tab)[1]);
set.objfn(lprecH, tab$Curr.Vol);
#add max and min price by part constraints
for (i in 1:dim(tab)[1] ) {
vec<-seq(1, dim(tab)[1] )*0
vec[i]=1
add.constraint(lprecH, vec, ">=", tab$Min.price[i])
add.constraint(lprecH, vec, "<=", tab$Max.price[i])
};
overallmax=sum(tab$Curr.Price*tab$Curr.Vol)*(1+as.numeric(maxPriceLvl));
overallmin=sum(tab$Curr.Price*tab$Curr.Vol)*(1+as.numeric(minPriceLvl));
#overall price change constraint = between 2 and 4%
add.constraint(lprecH, tab$Curr.Vol, "<=", overallmax);
add.constraint(lprecH, tab$Curr.Vol, ">=", overallmin);
lp.control(lprecH,sense=Obj);
ColNames<-paste("Product", ProdVec);
dimnames(lprecH) <- list(RowNames, ColNames);
#print(lprecH)
solve(lprecH);
get.objective(lprecH);
get.variables(lprecH);
# write.lp(lprecH,'C:\\modelH.lp',type='lp');
par(mfrow=c(3,2));
#plot old and new total revenue
#par(mfrow=c(1,1));
rev<-c(sum(tab$Curr.Price*tab$Curr.Vol), get.objective(lprecH));
bp<-barplot(rev, main="Overall Revenue Change",  names=c("Current", "Proposed"), horiz=TRUE,
xlab=paste("overall revenue change: ", sprintf("%.2f%%", (rev[2]/rev[1]-1)*100)));
text(bp, 0, sprintf("$%.2f",rev), horiz=TRUE, cex=1, pos=3);
currrevbypart<-tab$Curr.Price*tab$Curr.Vol
proprevbypart<-get.variables(lprecH)*tab$Curr.Vol
barplot(as.matrix(cbind(currrevbypart, proprevbypart)), col=rainbow(numProds), horiz=TRUE, main="Overall Revenue Change by SKU",
names=c("Current", "Proposed"), xlab=paste("overall revenue change: ", sprintf("%.2f%%", (rev[2]/rev[1]-1)*100)))
legend("center", fill=rainbow(numProds), horiz=TRUE, title="SKU", legend=tab$Part)
#plot old price by SKU
#partname<-matrix(seq(from = 1,  to = numProds, by = 1), nrow=10, ncol=1);
partname<-matrix(tab$Part);
pricebypartcurr<- tab$Curr.Price;
pricebypartprop<-get.variables(lprecH);
pricebypart<-c(pricebypartcurr, pricebypartprop);
#par(mfrow=c(2,1));
bp2curr<-barplot(pricebypartcurr, main="Price by SKU--Current", names=c(partname), xlab="SKU Number", col=rainbow(numProds));
text(bp2curr, 0, sprintf("$%.2f", pricebypartcurr), cex=1, pos=3);
#plot price change by SKU
pricechgbypart<-c(pricebypartprop-pricebypartcurr);
bp3<-barplot(pricechgbypart, main="Price Change by SKU ($)", names=c(partname), xlab="SKU Number", col=rainbow(numProds));
text(bp3, 0, sprintf("$%.2f", pricechgbypart), cex=1, pos=3);
#plot new price by SKU
bp2prop<-barplot(pricebypartprop,  names=c(partname), main="Price by SKU--Proposed", xlab="SKU Number", col=rainbow(numProds));
text(bp2prop, 0, sprintf("$%.2f", pricebypartprop), cex=1, pos=3);
#plot pct price change by SKU
pricechgbypart2<-c((pricebypartprop/pricebypartcurr-1)*100);
bp4<-barplot(pricechgbypart2, main="Price Change by SKU (%)", names=c(partname), xlab="SKU Number", col=rainbow(numProds));
text(bp4, 0, sprintf("%.0f%%", pricechgbypart2), cex=1, pos=3);
print(rev);
out<-cbind(tab, get.variables(lprecH));
return(list(output=out, model=lprecH));
}
PriceOpt
PriceOpt
View(mydata)
total <- sum(mydata$CurrVol)
View(mydata)
tab <- data.frame(Part=mydata$PRODUCT,
Curr.Vol=mydata$CurrVol,
Curr.Price=mydata$CurrPrice,
Curr.Profit=mydata$CurrProfit,
Max.price=mydata$MaxPrice
);
numProds=length(tab$Curr.Price);
minp=tab$Curr.Price;
for(i in 1:numProds){
if(minp[i]*0.9<(1-tab$Curr.Profit[i])*minp[i]){minp[i]<-(1-tab$Curr.Profit[i])*minp[i]}
else{minp[i]<-minp[i]*0.9}
};
tab$Min.price<-minp;
ProdVec=seq(from = 1,  to = numProds, by = 1);
L_const_names = paste(ProdVec, "Lower Constraint");
U_const_names = paste(ProdVec, "Upper Constraint");
L_const_names = c(L_const_names, "Overall Lower");
U_const_names = c(U_const_names, "Overall Upper");
NumConstraints=2*numProds+2;
#build empty RowNames Vector
RowNames<-vector(mode="character", length=NumConstraints);
for (i in 1:NumConstraints) {
if (i%%2 == 0){
RowNames[i]=U_const_names[i/2]
} else{
RowNames[i]=L_const_names[floor(i/2)+1]
}
}
lprecH <- make.lp(0, dim(tab)[1]);
lprecH
set.objfn(lprecH, tab$Curr.Vol);
for (i in 1:dim(tab)[1] ) {
vec<-seq(1, dim(tab)[1] )*0
vec[i]=1
add.constraint(lprecH, vec, ">=", tab$Min.price[i])
add.constraint(lprecH, vec, "<=", tab$Max.price[i])
};
overallmax=sum(tab$Curr.Price*tab$Curr.Vol)*(1+as.numeric(maxPriceLvl));
overallmin=sum(tab$Curr.Price*tab$Curr.Vol)*(1+as.numeric(minPriceLvl));
View(tab)
add.constraint(lprecH, tab$Curr.Vol, "<=", overallmax);
add.constraint(lprecH, tab$Curr.Vol, ">=", overallmin);
lp.control(lprecH,sense=Obj);
ColNames<-paste("Product", ProdVec);
dimnames(lprecH) <- list(RowNames, ColNames);
print(lprecH)
solve(lprecH);
get.objective(lprecH);
get.variables(lprecH);
lprecH
get.objective(lprecH);
setwd("C:/Users/Derek/Documents/R Scripts/Optimization")
mydata <-data.frame(PRODUCT=c('Shirt','Pants','Jacket', 'Socks', 'Hat', 'Dress', 'Necklace', 'Earring','Wallet',
'Hairclip', 'Bracelet', 'Shoes', 'Shorts', 'Tie', 'Scarf'),
CurrVol=c(490.726, 213.60007, 611.30530, 412.46491, 703.01489, 514.52871, 772.99246, 320.01358,
751.25310, 17.49786, 288.27874, 133.30393, 462.84954, 687.17171, 126.30996),
CurrPrice=c(3.87, 7.33, 2.36, 4.84, 1.21, 3.57, 0.34, 6.00, 0.61, 9.78, 6.40, 8.33, 4.21, 1.41, 8.42),
CurrProfit=c(0.016226465, -0.027278599, -0.029319706, 0.242550658, 0.001857236, 0.122904002, 0.193949035,
-0.072064944, -0.013124629, -0.026675148, -0.024014913, 0.367460394, 0.257394103, 0.097980519, 0.278531436))
# Remove certain rows
mydata <- mydata[-c(10, 11, 12, 13, 14, 15), ]
View(mydata)
View(mydata)
mydata$MaxPrice <- mydata$CurrPrice*1.10
library("lpSolveAPI")
# Declare variables for simulation
maxPriceLvl <- 0.04
minPriceLvl <- 0.02
Obj <- "max" # max targets the 0.04 revenue increase level, min targets the 0.02 level
tab <- data.frame(Part=mydata$PRODUCT,
Curr.Vol=mydata$CurrVol,
Curr.Price=mydata$CurrPrice,
Curr.Profit=mydata$CurrProfit,
Max.price=mydata$MaxPrice
);
numProds=length(tab$Curr.Price);
#calculate min price
minp=tab$Curr.Price;
for(i in 1:numProds){
if(minp[i]*0.9<(1-tab$Curr.Profit[i])*minp[i]){minp[i]<-(1-tab$Curr.Profit[i])*minp[i]}
else{minp[i]<-minp[i]*0.9}
};
tab$Min.price<-minp;
#Create constraing labels
ProdVec=seq(from = 1,  to = numProds, by = 1);
L_const_names = paste(ProdVec, "Lower Constraint");
U_const_names = paste(ProdVec, "Upper Constraint");
L_const_names = c(L_const_names, "Overall Lower");
U_const_names = c(U_const_names, "Overall Upper");
NumConstraints=2*numProds+2;
#build empty RowNames Vector
RowNames<-vector(mode="character", length=NumConstraints);
#assign constraing Names
for (i in 1:NumConstraints) {
if (i%%2 == 0){
RowNames[i]=U_const_names[i/2]
} else{
RowNames[i]=L_const_names[floor(i/2)+1]
}
}
lprecH <- make.lp(0, dim(tab)[1]);
set.objfn(lprecH, tab$Curr.Vol);
#add max and min price by part constraints
for (i in 1:dim(tab)[1] ) {
vec<-seq(1, dim(tab)[1] )*0
vec[i]=1
add.constraint(lprecH, vec, ">=", tab$Min.price[i])
add.constraint(lprecH, vec, "<=", tab$Max.price[i])
};
overallmax=sum(tab$Curr.Price*tab$Curr.Vol)*(1+as.numeric(maxPriceLvl));
overallmin=sum(tab$Curr.Price*tab$Curr.Vol)*(1+as.numeric(minPriceLvl));
#overall price change constraint = between 2 and 4%
add.constraint(lprecH, tab$Curr.Vol, "<=", overallmax);
add.constraint(lprecH, tab$Curr.Vol, ">=", overallmin);
lp.control(lprecH,sense=Obj);
ColNames<-paste("Product", ProdVec);
dimnames(lprecH) <- list(RowNames, ColNames);
#print(lprecH)
solve(lprecH);
get.objective(lprecH);
get.variables(lprecH);
write.lp(lprecH,'C:\\Users\\Derek\\Documents\\R Scripts\\Optimization\\modelH.lp',type='lp');
# par(mfrow=c(3,2));
#plot old and new total revenue
par(mfrow=c(1,1));
rev<-c(sum(tab$Curr.Price*tab$Curr.Vol), get.objective(lprecH));
bp<-barplot(rev, main="Overall Revenue Change",  names=c("Current", "Proposed"), horiz=TRUE,
xlab=paste("overall revenue change: ", sprintf("%.2f%%", (rev[2]/rev[1]-1)*100)));
text(bp, 0, sprintf("$%.2f",rev), horiz=TRUE, cex=1, pos=3);
currrevbypart<-tab$Curr.Price*tab$Curr.Vol
proprevbypart<-get.variables(lprecH)*tab$Curr.Vol
barplot(as.matrix(cbind(currrevbypart, proprevbypart)), col=rainbow(numProds), horiz=TRUE, main="Overall Revenue Change by SKU",
names=c("Current", "Proposed"), xlab=paste("overall revenue change: ", sprintf("%.2f%%", (rev[2]/rev[1]-1)*100)))
legend("center", fill=rainbow(numProds), horiz=TRUE, title="SKU", legend=tab$Part)
#plot old price by SKU
#partname<-matrix(seq(from = 1,  to = numProds, by = 1), nrow=10, ncol=1);
partname<-matrix(tab$Part);
pricebypartcurr<- tab$Curr.Price;
pricebypartprop<-get.variables(lprecH);
pricebypart<-c(pricebypartcurr, pricebypartprop);
#par(mfrow=c(2,1));
bp2curr<-barplot(pricebypartcurr, main="Price by SKU--Current", names=c(partname), xlab="SKU Number", col=rainbow(numProds));
text(bp2curr, 0, sprintf("$%.2f", pricebypartcurr), cex=1, pos=3);
#plot price change by SKU
pricechgbypart<-c(pricebypartprop-pricebypartcurr);
bp3<-barplot(pricechgbypart, main="Price Change by SKU ($)", names=c(partname), xlab="SKU Number", col=rainbow(numProds));
text(bp3, 0, sprintf("$%.2f", pricechgbypart), cex=1, pos=3);
#plot new price by SKU
bp2prop<-barplot(pricebypartprop,  names=c(partname), main="Price by SKU--Proposed", xlab="SKU Number", col=rainbow(numProds));
text(bp2prop, 0, sprintf("$%.2f", pricebypartprop), cex=1, pos=3);
#plot pct price change by SKU
pricechgbypart2<-c((pricebypartprop/pricebypartcurr-1)*100);
bp4<-barplot(pricechgbypart2, main="Price Change by SKU (%)", names=c(partname), xlab="SKU Number", col=rainbow(numProds));
text(bp4, 0, sprintf("%.0f%%", pricechgbypart2), cex=1, pos=3);
print(rev);
out<-cbind(tab, get.variables(lprecH));
#   return(list(output=out, model=lprecH));
View(out)

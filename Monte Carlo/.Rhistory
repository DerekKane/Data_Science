library(ggmap)
library(mapproj)
get_googlemap(urlonly = TRUE)
ggmap(get_googlemap())
d <- function(x=-95.36, y=29.76, n,r,a){
round(data.frame(
lon = jitter(rep(x,n), amount = a),
lat = jitter(rep(y,n), amount = a)
), digits = r)
}
df <- d(n=50,r=3,a=.3)
map <- get_googlemap(markers = df, scale = 2)
ggmap(map)
ggmap(map, fullpage = TRUE) +
geom_point(aes(x = lon, y = lat), data = df, size = 3, colour = "black")
library(scales) # for muted graphics
str(crime)
data<-crime
View(data)
violent_crimes <- subset(crime, ((offense != "auto theft")
& (offense != "theft")
& (offense != "burglary")))
# rank violent crimes
violent_crimes$offense <- factor(violent_crimes$offense
, levels = c("robbery", "aggravated assault"
, "rape", "murder"))
violent_crimes <- subset(violent_crimes, ((-95.39681 <= lon)
& (lon <= -95.34188)
& (29.73631 <= lat)
& (lat <= 29.784)))
map <- get_map( location = "Houston TX"
, zoom = 14
, maptype = "roadmap"
, color = "bw" # make black & white so color is data
)
p <- ggmap(map)
p <- p + geom_point(data = violent_crimes
, aes(x = lon, y = lat, size = offense, colour = offense))
p <- p + theme( legend.position = c(0.0, 0.7) # put the legend inside the plot area
, legend.justification = c(0, 0)
, legend.background = element_rect(colour = F, fill = "white")
, legend.key = element_rect(fill = F, colour = F)
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
print(p)
p <- ggmap(map)
overlay <- stat_density2d(data = violent_crimes
, aes(x = lon, y = lat, fill = ..level.. , alpha = ..level..)
, size = 2, bins = 4, geom = "polygon")
p <- p + overlay
p <- p + scale_fill_gradient2("Violent Crime Density", low = "white", mid = "yellow", high = "red")
p <- p + scale_alpha(range = c(0.4, 0.75), guide = FALSE)
p <- p + guides(fill = guide_colorbar(barwidth = 1.5, barheight = 10))
#p <- p + inset(grob = ggplotGrob(ggplot() + overlay + theme_inset())
# , xmin = -95.35836, xmax = Inf, ymin = -Inf, ymax = 29.75062)
print(p)
p <- p + facet_wrap( ~ day, nrow = 2)
print(p)
setwd("C:/Users/Derek/Documents/R Scripts/Pricing Optimization")
mydata <- read.csv("C:/Users/Derek/Documents/R Scripts/Pricing Optimization/PriceElasticityExample.csv")
View(mydata)
mydata$ASP <- (mydata$Revenue / mydata$Qty)
View(mydata)
mydata$logASP <- log(mydata$ASP)
mydata$logQty <- log(mydata$Qty)
View(mydata)
Upper.Price <- 20
Lower.Price <- 0
Product.Cost <- 2.5
library("forecast")
library("lubridate")
library("TTR")
library("reshape2")
library("sqldf")
library("plyr")
library("zoo")
library("lubridate")
library("ggplot2")
library("scales")
library("tcltk")
library("nlme")
Elasticity.Reg <- lmList(logQty ~ logASP | Dimension.1, mydata, pool=FALSE)
output.vector <- coef(summary(Elasticity.Reg))
Elasticity.df <- as.data.frame(output.vector)
# Convert Row Names to Columns
Elasticity.df <- cbind(Dimension.1 = rownames(Elasticity.df), Elasticity.df)
View(Elasticity.df)
SalesQty.Reg <- lmList(Qty ~ ASP | Dimension.1, mydata, pool=FALSE)
# SalesQty.Reg <- lmList(Qty ~ ASP + ad_type +  price_apple + price_cookies | Dimension.1, mydata, pool=FALSE)
output.vector <- coef(summary(SalesQty.Reg))
SalesQty.df <- as.data.frame(output.vector)
View(SalesQty.df)
SalesQty.df <- cbind(Dimension.1 = rownames(SalesQty.df), SalesQty.df)
colnames(SalesQty.df)[2] <- "Estimate"
f <- function(x) {
((SalesQty.df$Estimate.ASP[1])*x^2)+((SalesQty.df$Estimate[1]+(Product.Cost*-1)*SalesQty.df$Estimate.ASP[1])*x)+((Product.Cost*-1)*SalesQty.df$Estimate[1])
}
optimizedprice <- optimize(f, lower=0, upper=20, maximum=TRUE)
optimizedprice
price.elas <- (Elasticity.df$Estimate.logASP[1] / (1+(Elasticity.df$Estimate.logASP[1])))*Product.Cost
opt.margin <- (-1 / Elasticity.df$Estimate.logASP[1])
opt.margin
View(mydata)
rm(list=ls())
# Supress warning messages.
options(warn=-1)
# Set a working directory
setwd("C:/Users/Derek/Documents/R Scripts/Monte Carlo")
# Load the csv file.
mydata <- read.csv("C:/Users/Derek/Documents/R Scripts/Monte Carlo/MonteCarlo.csv")
View(mydata)
MC.Results <- data.frame(Dimension1=character(),
Dimension2=character(),
MC.Estimation=numeric(),
MC.Lower=numeric(),
MC.Upper=numeric(),
stringsAsFactors=FALSE)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create the for loop for the simulation.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
runs <- 100000
for (i in 1:nrow(mydata)) {
# Add the dimensions to the table.
Dimension1 <-  mydata$Dimension1[i]
Dimension2 <-  mydata$Dimension2[i]
# Declare variables for the simulation
Lower.ASP <- mydata$ASP.Lower[i]
Upper.ASP <- mydata$ASP.Upper[i]
Lower.Qty <- mydata$Qty.Lower[i]
Upper.Qty <- mydata$Qty.Upper[i]
Total.Lower <- Lower.ASP * Lower.Qty
Total.Upper <- Upper.ASP * Upper.Qty
average <- mean(Total.Lower:Total.Upper)
foo <- c(Total.Lower,Total.Upper, average)
popSD <- function(x) {
return(sqrt(sum((x - mean(x))^2) / length(x)))
}
std.p <- popSD(foo)
# Run the simulation.
ASP.sample <- runif(runs, min=Lower.ASP, max=Upper.ASP)
Qty.sample <- runif(runs, min=Lower.Qty, max=Upper.Qty)
Revenue <- ASP.sample*Qty.sample
MC.Estimation <- mean(Revenue)
MC.Upper <- MC.Estimation + popSD(Revenue)
MC.Lower <- MC.Estimation - popSD(Revenue)
# Append the results back to the table
MC.Results2 <- data.frame(Dimension1, Dimension2, MC.Estimation, MC.Upper, MC.Lower)
MC.Results <- rbind(MC.Results, MC.Results2)
}
View(MC.Results)

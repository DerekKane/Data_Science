names(mydata) <- c("Date", "OrderNumber", "CustomerId","ProductId", "Value")
# Parse the dates into the dataset
mydata$ParsedDate <- fast_strptime(mydata$Date, "%m/%d/%Y")
#mydata$ParsedDate <- as.Date(mydata$Date, "%m/%d/%Y")
NOW <- fast_strptime("2015-10-20", "%Y-%m-%d")
# Calculate the three attributes separately and
# then combine into an RFM Table by merging on Customer Id.
# Recency is calculated in two steps. First calculate the maximum Order
# Date for each customer and then, separately, the difference between that date and NOW.
# Frequency and Monetary value is computed similarly with an aggregation.
# All three attributes are then joined using two merge operations.
R_table <- aggregate(ParsedDate ~ CustomerId, mydata, FUN=max) # Calculate R
R_table$R <- as.numeric(NOW - R_table$ParsedDate)
F_table <- aggregate(OrderNumber ~ CustomerId, mydata, FUN=length) # Calculate F
M_table <- aggregate(Value ~ CustomerId, mydata, FUN=sum) # Calculate M
RFM_table <- merge(R_table,F_table,by.x="CustomerId", by.y="CustomerId") # Merge R with F
RFM_table <- merge(RFM_table,M_table, by.x="CustomerId", by.y="CustomerId") # Merge M into RF
RFM_table$ParsedDate <- NULL # Remove unnecessary column
names(RFM_table) <- c("CustomerId", "R", "F", "M") # And change names
##################################################################################
# Create the K-Means algorithm for clustering segmentation
##################################################################################
# First, we will standardize and scale the data for clustering
df <- scale(RFM_table[-1])
df <- as.data.frame(df)
# Function to determine the correct number of clusters
# Determine number of clusters
wss <- (nrow(df)-1)*sum(apply(df,2,var))
for (i in 2:5) wss[i] <- sum(kmeans(df,
centers=i)$withinss)
# Create the scree plot for analysis
plot(1:5, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Determine the number of clusters
cl <- kmeans(df,3)
clusternum <- cl$cluster
# Plot the results
plot(df$R,df$F, col=clusternum+1)
# Bind Cluster results back to the main data frame
RFM_table$Cluster <- cl$cluster
library(ggplot2)
View(RFM_table)
View(RFM_table)
RFM_table <- mydata2
RFM_table$Cluster <- as.character(RFM_table$Cluster)
RFM_table$Cluster <- 'population'
View(RFM_table)
clustdata <- subset(mydata2, mydata2$Cluster=='1')
newdata <- rbind(clustdata, RFM_table)
RFM_table <- mydata2
mydata2 <- RFM_table
clustdata <- subset(mydata2, mydata2$Cluster=='1')
newdata <- rbind(clustdata, RFM_table)
View(newdata)
View(clustdata)
###################################################################
# RFM Customer Segmentation Analysis
###################################################################
# Clear the workspace
rm(list = ls())
# Set working Directory
setwd("C:/Users/dkane/Documents/R Scripts/Clustering/")
# Load the data
mydata <- read.csv("RFMCustomer.csv", stringsAsFactor=FALSE, header=FALSE)
# Load Libraries for Analysis
# install.packages("data.table")
library(lubridate)
library(data.table)
library(ggplot2)
# Create the names for the different columns
names(mydata) <- c("Date", "OrderNumber", "CustomerId","ProductId", "Value")
# Parse the dates into the dataset
mydata$ParsedDate <- fast_strptime(mydata$Date, "%m/%d/%Y")
#mydata$ParsedDate <- as.Date(mydata$Date, "%m/%d/%Y")
NOW <- fast_strptime("2015-10-20", "%Y-%m-%d")
# Calculate the three attributes separately and
# then combine into an RFM Table by merging on Customer Id.
# Recency is calculated in two steps. First calculate the maximum Order
# Date for each customer and then, separately, the difference between that date and NOW.
# Frequency and Monetary value is computed similarly with an aggregation.
# All three attributes are then joined using two merge operations.
R_table <- aggregate(ParsedDate ~ CustomerId, mydata, FUN=max) # Calculate R
R_table$R <- as.numeric(NOW - R_table$ParsedDate)
F_table <- aggregate(OrderNumber ~ CustomerId, mydata, FUN=length) # Calculate F
M_table <- aggregate(Value ~ CustomerId, mydata, FUN=sum) # Calculate M
RFM_table <- merge(R_table,F_table,by.x="CustomerId", by.y="CustomerId") # Merge R with F
RFM_table <- merge(RFM_table,M_table, by.x="CustomerId", by.y="CustomerId") # Merge M into RF
RFM_table$ParsedDate <- NULL # Remove unnecessary column
names(RFM_table) <- c("CustomerId", "R", "F", "M") # And change names
##################################################################################
# Create the K-Means algorithm for clustering segmentation
##################################################################################
# First, we will standardize and scale the data for clustering
df <- scale(RFM_table[-1])
df <- as.data.frame(df)
# Function to determine the correct number of clusters
# Determine number of clusters
wss <- (nrow(df)-1)*sum(apply(df,2,var))
for (i in 2:5) wss[i] <- sum(kmeans(df,
centers=i)$withinss)
# Create the scree plot for analysis
plot(1:5, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Determine the number of clusters
cl <- kmeans(df,3)
clusternum <- cl$cluster
# Plot the results
plot(df$R,df$F, col=clusternum+1)
# Bind Cluster results back to the main data frame
RFM_table$Cluster <- cl$cluster
mydata2 <- RFM_table
RFM_table$Cluster <- as.character(RFM_table$Cluster)
RFM_table$Cluster <- 'population'
# Focus on Cluster 1
clustdata <- subset(mydata2, mydata2$Cluster=='1')
newdata <- rbind(clustdata, RFM_table)
View(newdata)
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata$R, fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample
for (i in 1:newdata[-5]){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$kmfit.cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
check <- names(newdata[-5])
ncol(newdata[-5])
names(newdata[-5])
newdata$CustomerId <- NULL
for (i in 1:newdata[-4]){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$kmfit.cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
check <- names(newdata[-3])
check
check <- names(newdata[-4])
check
for (i in 1:newdata[-4]){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$kmfit.cluster)) + geom_density(alpha=0.3)
plotexample}
for (i in 1:newdata[-4]){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
for (i in 1:newdata[1:3]){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
View(newdata)
mydata2 <- RFM_table
View(mydata2)
clustdata <- subset(mydata2, mydata2$Cluster=='2')
newdata <- rbind(clustdata, RFM_table)
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata$R, fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample
clustdata <- subset(mydata2, mydata2$Cluster=='2')
newdata <- rbind(clustdata, RFM_table)
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata$R, fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample
View(newdata)
View(mydata2)
###################################################################
# RFM Customer Segmentation Analysis
###################################################################
# Clear the workspace
rm(list = ls())
# Set working Directory
setwd("C:/Users/dkane/Documents/R Scripts/Clustering/")
# Load the data
mydata <- read.csv("RFMCustomer.csv", stringsAsFactor=FALSE, header=FALSE)
# Load Libraries for Analysis
# install.packages("data.table")
library(lubridate)
library(data.table)
library(ggplot2)
# Create the names for the different columns
names(mydata) <- c("Date", "OrderNumber", "CustomerId","ProductId", "Value")
# Parse the dates into the dataset
mydata$ParsedDate <- fast_strptime(mydata$Date, "%m/%d/%Y")
#mydata$ParsedDate <- as.Date(mydata$Date, "%m/%d/%Y")
NOW <- fast_strptime("2015-10-20", "%Y-%m-%d")
# Calculate the three attributes separately and
# then combine into an RFM Table by merging on Customer Id.
# Recency is calculated in two steps. First calculate the maximum Order
# Date for each customer and then, separately, the difference between that date and NOW.
# Frequency and Monetary value is computed similarly with an aggregation.
# All three attributes are then joined using two merge operations.
R_table <- aggregate(ParsedDate ~ CustomerId, mydata, FUN=max) # Calculate R
R_table$R <- as.numeric(NOW - R_table$ParsedDate)
F_table <- aggregate(OrderNumber ~ CustomerId, mydata, FUN=length) # Calculate F
M_table <- aggregate(Value ~ CustomerId, mydata, FUN=sum) # Calculate M
RFM_table <- merge(R_table,F_table,by.x="CustomerId", by.y="CustomerId") # Merge R with F
RFM_table <- merge(RFM_table,M_table, by.x="CustomerId", by.y="CustomerId") # Merge M into RF
RFM_table$ParsedDate <- NULL # Remove unnecessary column
names(RFM_table) <- c("CustomerId", "R", "F", "M") # And change names
##################################################################################
# Create the K-Means algorithm for clustering segmentation
##################################################################################
# First, we will standardize and scale the data for clustering
df <- scale(RFM_table[-1])
df <- as.data.frame(df)
# Function to determine the correct number of clusters
# Determine number of clusters
wss <- (nrow(df)-1)*sum(apply(df,2,var))
for (i in 2:5) wss[i] <- sum(kmeans(df,
centers=i)$withinss)
# Create the scree plot for analysis
plot(1:5, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Determine the number of clusters
cl <- kmeans(df,3)
clusternum <- cl$cluster
# Plot the results
plot(df$R,df$F, col=clusternum+1)
# Bind Cluster results back to the main data frame
RFM_table$Cluster <- cl$cluster
RFM_table2 <- RFM_table
mydata2 <- RFM_table2
RFM_table2$Cluster <- as.character(RFM_table2$Cluster)
RFM_table2$Cluster <- 'population'
clustdata <- subset(mydata2, mydata2$Cluster=='2')
newdata <- rbind(clustdata, RFM_table2)
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata$R, fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample
ncol(newdata[-4])
names(newdata[-4])
newdata$CustomerId <- NULL
check <- names(newdata[-4])
check
ncol(newdata[-4])
names(newdata[-4])
for (i in 1:newdata[-4]){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
View(newdata)
plotexample
for (i in 1:newdata[1:3,]){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
for (i in names(df[-4])){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
for (i in names(df[-4])){
# plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
par(mfrow=c(2,2))
for (i in names(df[-4])){
# plot.new()
plotexample(i) <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample(i)
for (i in names(df[-4])){
# plot.new()
plotexample(i) <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample(i)}
for (i in names(df[-4])){
# plot.new()
plotexample(i) <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample(i)}
plot.new()
par(mfrow=c(2,2))
for (i in names(df[-4])){
# plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
for (i in ncol(df)){
# plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
for (i in seq(1,length(newdata[-5],1)) ){
# plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
for (i in seq(1,length(newdata,1)) ){
# plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
names(df[-4])
View(df)
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample
ncol(newdata[-4])
names(newdata[-4])
for (i in names(newdata[-4])){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
View(newdata)
for (i in names(newdata[-4])){
par(mfrow=c(2,2))
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
for (i in names(newdata[-4])){
par(mfrow=c(2,2))
plot.new()
plotexample[,i] <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample[,i]}
plotexample
for (i in names(newdata[-4])){
par(mfrow=c(2,2))
plot.new()
plotexample[,i] <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
for (i in names(newdata[-4])){
par(mfrow=c(2,2))
plot.new()
plotexample(i) <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$Cluster)) + geom_density(alpha=0.3)
plotexample}
setwd("C:/Users/dkane/Documents/R Scripts/Statistics/")
library(caret)
library(ggplot2)
mydata <- iris
mydata$Species <- NULL
clusterdata <- mydata
clusterdata$Sepal.Length <- scale(clusterdata$Sepal.Length, center = TRUE, scale = TRUE)
# Entire dataframe
clusterdata <- data.frame(lapply(clusterdata, function(x) scale(x, center = TRUE, scale = TRUE)))
#################################################################
# Design & Evaluate the Cluster
#################################################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Determine number of clusters using Kmeans
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wss <- (nrow(clusterdata)-1)*sum(apply(clusterdata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(clusterdata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Ideal KMEAN cluster  = 3
# K-Means Cluster Analysis
kmfit <- kmeans(clusterdata, 3) # 3 cluster solution
# get cluster means
aggregate(clusterdata,by=list(kmfit$cluster),FUN=mean)
# append cluster assignment
mydata <- data.frame(mydata, kmfit$cluster)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Model Based Clustering
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(mclust)
mcfit <- Mclust(clusterdata)
plot(mcfit) # plot results
plot.new()
allspecies <- mydata
allspecies$kmfit.cluster <- as.character(allspecies$kmfit.cluster)
allspecies$kmfit.cluster <- 'population'
# Focus on Cluster 1
clustdata <- subset(mydata, mydata$kmfit.cluster=='1')
newdata <- rbind(clustdata, allspecies)
for (i in 1:newdata[-5]){
plot.new()
plotexample <-ggplot(newdata, aes(x=newdata[,i], fill=newdata$kmfit.cluster)) + geom_density(alpha=0.3)
plotexample}
plotexample
View(newdata)
###################################################################
# RFM Customer Segmentation Analysis
###################################################################
# Clear the workspace
rm(list = ls())
# Set working Directory
setwd("C:/Users/dkane/Documents/R Scripts/Clustering/")
# Load the data
mydata <- read.csv("RFMCustomer.csv", stringsAsFactor=FALSE, header=FALSE)
# Load Libraries for Analysis
# install.packages("data.table")
library(lubridate)
library(data.table)
library(ggplot2)
# Create the names for the different columns
names(mydata) <- c("Date", "OrderNumber", "CustomerId","ProductId", "Value")
# Parse the dates into the dataset
mydata$ParsedDate <- fast_strptime(mydata$Date, "%m/%d/%Y")
#mydata$ParsedDate <- as.Date(mydata$Date, "%m/%d/%Y")
NOW <- fast_strptime("2015-10-20", "%Y-%m-%d")
# Calculate the three attributes separately and
# then combine into an RFM Table by merging on Customer Id.
# Recency is calculated in two steps. First calculate the maximum Order
# Date for each customer and then, separately, the difference between that date and NOW.
# Frequency and Monetary value is computed similarly with an aggregation.
# All three attributes are then joined using two merge operations.
R_table <- aggregate(ParsedDate ~ CustomerId, mydata, FUN=max) # Calculate R
R_table$R <- as.numeric(NOW - R_table$ParsedDate)
F_table <- aggregate(OrderNumber ~ CustomerId, mydata, FUN=length) # Calculate F
M_table <- aggregate(Value ~ CustomerId, mydata, FUN=sum) # Calculate M
RFM_table <- merge(R_table,F_table,by.x="CustomerId", by.y="CustomerId") # Merge R with F
RFM_table <- merge(RFM_table,M_table, by.x="CustomerId", by.y="CustomerId") # Merge M into RF
RFM_table$ParsedDate <- NULL # Remove unnecessary column
names(RFM_table) <- c("CustomerId", "R", "F", "M") # And change names
##################################################################################
# Create the K-Means algorithm for clustering segmentation
##################################################################################
# First, we will standardize and scale the data for clustering
df <- scale(RFM_table[-1])
df <- as.data.frame(df)
# Function to determine the correct number of clusters
# Determine number of clusters
wss <- (nrow(df)-1)*sum(apply(df,2,var))
for (i in 2:5) wss[i] <- sum(kmeans(df,
centers=i)$withinss)
# Create the scree plot for analysis
plot(1:5, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Determine the number of clusters
cl <- kmeans(df,3)
clusternum <- cl$cluster
# Plot the results
plot(df$R,df$F, col=clusternum+1)
# Bind Cluster results back to the main data frame
RFM_table$Cluster <- cl$cluster
R_density <- ggplot(newdata, aes(x=newdata$R, fill=newdata$Cluster)) + geom_density(alpha=0.3)
F_density <- ggplot(newdata, aes(x=newdata$F, fill=newdata$Cluster)) + geom_density(alpha=0.3)
M_density <- ggplot(newdata, aes(x=newdata$M, fill=newdata$Cluster)) + geom_density(alpha=0.3)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create 2 new datasets with cluster 1 and all species
RFM_table2 <- RFM_table
mydata2 <- RFM_table2
RFM_table2$Cluster <- as.character(RFM_table2$Cluster)
RFM_table2$Cluster <- 'population'
# Focus on Cluster 1
clustdata <- subset(mydata2, mydata2$Cluster=='2')
newdata <- rbind(clustdata, RFM_table2)
R_density <- ggplot(newdata, aes(x=newdata$R, fill=newdata$Cluster)) + geom_density(alpha=0.3)
F_density <- ggplot(newdata, aes(x=newdata$F, fill=newdata$Cluster)) + geom_density(alpha=0.3)
M_density <- ggplot(newdata, aes(x=newdata$M, fill=newdata$Cluster)) + geom_density(alpha=0.3)
R_density
multiplot(R_density, F_density, M_density, cols=2)
library(grid)
multiplot(R_density, F_density, M_density, cols=2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(R_density, F_density, M_density, cols=2)
multiplot(R_density, F_density, M_density)
library(plyr)
library(randomForest)
install.packages("plyr")
install.packages("plyr")
install.packages("randomForest")
library(plyr)
library(randomForest)
data <- iris
k = 5 #Folds
data$id <- sample(1:k, nrow(data), replace = TRUE)
list <- 1:k
prediction <- data.frame()
testsetCopy <- data.frame()
progress.bar <- create_progress_bar("text")
progress.bar$init(k)
for (i in 1:k){
# remove rows with id i from dataframe to create training set
# select rows with id i to create test set
trainingset <- subset(data, id %in% list[-i])
testset <- subset(data, id %in% c(i))
# run a random forest model
mymodel <- randomForest(trainingset$Sepal.Length ~ ., data = trainingset, ntree = 100)
# remove response column 1, Sepal.Length
temp <- as.data.frame(predict(mymodel, testset[,-1]))
# append this iteration's predictions to the end of the prediction data frame
prediction <- rbind(prediction, temp)
# append this iteration's test set to the test set copy data frame
# keep only the Sepal Length Column
testsetCopy <- rbind(testsetCopy, as.data.frame(testset[,1]))
progress.bar$step()
}
result <- cbind(prediction, testsetCopy[, 1])
names(result) <- c("Predicted", "Actual")
result$Difference <- abs(result$Actual - result$Predicted)
summary(result$Difference)
result
View(result)
list

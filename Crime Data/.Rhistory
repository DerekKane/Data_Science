# Note, I include "warning=FALSE, message=FALSE" in the knitr options
# to supress all the Google Maps API messages in the output.
ll.NMcrime <- geocode(NMcrime$Address)
NMcrime2 <- cbind(NMcrime, ll.NMcrime)
# Since it takes a while to geocode many addresses,
# save this output to a file that can be read in conveniently as you
# develop the code below.
write.csv(NMcrime2, fn.NMcrime2, row.names = FALSE)
}
setwd("C:/Users/kane.de/Documents/RPackages/Crime Data")
fn.NMcrime2 <- "C:/Users/kane.de/Documents/RPackages/Crime Data/NMcrime.csv"
if (file.exists(fn.NMcrime2)) {
# if this file exists, then weve already done the geocode(),
# just read the file
NMcrime2 <- read.csv(fn.NMcrime2, stringsAsFactors = FALSE)
} else {
# otherwise, read the original file and do the geocode() and write the file
NMcrime <- read.csv("http://statacumen.com/teach/SC1/SC1_16_crimemapping_Theft2013Q1.csv"
, header = FALSE, skip = 11, stringsAsFactors = FALSE
, col.names = c("Type", "Description", "Case", "Location", "Agency", "Date"))
NMcrime$CityState <- "Albuquerque NM"
NMcrime$Address <- paste(NMcrime$Location, NMcrime$CityState)
# geocode the lat/lon, though geocode returns lon/lat (for x,y order)
# Note, I include "warning=FALSE, message=FALSE" in the knitr options
# to supress all the Google Maps API messages in the output.
ll.NMcrime <- geocode(NMcrime$Address)
NMcrime2 <- cbind(NMcrime, ll.NMcrime)
# Since it takes a while to geocode many addresses,
# save this output to a file that can be read in conveniently as you
# develop the code below.
write.csv(NMcrime2, fn.NMcrime2, row.names = FALSE)
}
install.packages("rworldmap")
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap, main = "World")
plot(newmap
, xlim = c(-139.3, -58.8) # if you reverse these, the world gets flipped
, ylim = c(13.5, 55.7)
, asp = 1 # different aspect projections
, main = "US from worldmap")
library(ggplot2)
map.world <- map_data(map = "world")
str(map.world)
length(unique(map.world$region))
length(unique(map.world$group))
p1 <- ggplot(map.world, aes(x = long, y = lat, group = group))
p1 <- p1 + geom_polygon() # fill areas
p1 <- p1 + labs(title = "World, plain")
print(p1)
p2 <- ggplot(map.world, aes(x = long, y = lat, group = group, colour = region))
p2 <- p2 + geom_polygon() # fill areas
p2 <- p2 + theme(legend.position="none") # remove legend with fill colours
p2 <- p2 + labs(title = "World, colour borders")
print(p2)
p3 <- ggplot(map.world, aes(x = long, y = lat, group = group, fill = region))
p3 <- p3 + geom_polygon() # fill areas
p3 <- p3 + theme(legend.position="none") # remove legend with fill colours
p3 <- p3 + labs(title = "World, filled regions")
print(p3)
p4 <- ggplot(map.world, aes(x = long, y = lat, group = group, colour = region))
p4 <- p4 + geom_path() # country outline, instead
p4 <- p4 + theme(legend.position="none") # remove legend with fill colours
p4 <- p4 + labs(title = "World, path outlines only")
print(p4)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1, p2, p3, p4, ncol=2, main="ggmap examples")
install.packages("ggmap")
install.packages("mapproj")
map <- get_map(
location = "New Mexico" # google search string
, zoom = 7 # larger is closer
, maptype = "hybrid" # map type)
map <- get_map(
location = "New Mexico" # google search string
, zoom = 7 # larger is closer
, maptype = "hybrid" # map type
)
map <- get_map(
location = "New Mexico" # google search string
, zoom = 7 # larger is closer
, maptype = "hybrid" # map type
)
map <- get_map(
location = "New Mexico" # google search string
, zoom = 7 # larger is closer
, maptype = "hybrid" # map type
)
map <- get_map(location = "New Mexico", zoom = 7, maptype = "hybrid")
library(ggmap)
library(mapproj)
map <- get_map(location = "New Mexico", zoom = 7, maptype = "hybrid")
p <- ggmap(map)
p <- p + labs(title = "NM hybrid")
print(p)
map <- get_map(location = "Albuquerque, New Mexico", zoom = 10, maptype = "watercolor")
p <- ggmap(map)
p <- p + labs(title = "Albuquerque watercolor")
print(p)
dat <- read.table(text = "
location lat long
MathStat 35.08396 -106.62410
Ducks 35.08507 -106.62238
SC1Class 35.08614 -106.62349
Biology 35.08243 -106.62296
CSEL 35.08317 -106.62414
", header = TRUE)
map <- get_map(
location = "University of New Mexico", zoom = 16, maptype = "watercolor")
p <- ggmap(map)
p <- p + geom_point(data = dat, aes(x = long, y = lat, shape = location, colour = location, size = 7)
p <- p + geom_text(data = dat, aes(x = long, y = lat, label = location), hjust = -0.2)
p <- ggmap(map)
p <- p + geom_point(data = dat, aes(x = long, y = lat, shape = location, colour = location)
, size = 7)
p <- p + geom_text(data = dat, aes(x = long, y = lat, label = location), hjust = -0.2)
p <- p + theme( legend.position = "none" # remove legend
, panel.grid.major = element_blank()
p <- p + theme( legend.position = "none" # remove legend
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
p <- p + labs(
print(p)
p <- p + theme( legend.position = "none" # remove legend
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
p <- p + labs(title = "UNM SC1 locations")
print(p)
dat.pts <- data.frame(x = dat$long, y = dat$lat)
map <- get_googlemap(
"University of New Mexico" # google search string
, zoom = 16 # larger is closer
, maptype = "satellite" # map type
, markers = dat.pts # markers for map
, path = dat.pts # path, in order of points
, scale = 2
)
p <- ggmap(map
, extent = "device" # remove white border around map
, darken = 0.2 # darken map layer to help points stand out
)
p <- p + geom_text(data = dat, aes(x = long, y = lat, label = location)
, hjust = -0.2, colour = "white", size = 6)
p <- p + theme( legend.position = c(0.05, 0.05) # put the legend inside the plot area
, legend.justification = c(0, 0)
, legend.background = element_rect(colour = F, fill = "white")
, legend.key = element_rect(fill = F, colour = F)
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
p <- p + labs(title = "UNM Walk around campus")
print(p)
coffee.shops <- read.csv(text = "
Name|Address
Annapurna
s World Vegetarian Cafe|2201 Silver Avenue Southeast, Albuquerque, NM 87106
Dunkin
Donuts|1902 Central Avenue Southeast, Albuquerque, NM 87106
Flying Star Cafe|3416 Central Avenue Southeast, Albuquerque, NM 87106
Limonata|3220 Silver Avenue Southeast, Albuquerque, NM 87106
Satellite Coffee|2300 Central Avenue Southeast, Albuquerque, New Mexico 87106
Satellite Coffee|3513 Central Avenue Northeast, Albuquerque, NM 87106
Starbucks|3400 Central Avenue Southeast, Albuquerque, NM 87106
Winning Coffee Co.|111 Harvard Drive Southeast, Albuquerque, NM 87106
", sep = "|", strip.white = TRUE, stringsAsFactors = FALSE)
coffee.shops
home <- c(-106.624147, 35.083921)
install.packages("plyr")
install.packages("plyr")
library(plyr)
cs.dist <- ddply(coffee.shops, .(Name,Address)
, .fun = function(X) f
map.dist <- mapdist(from = home
, to = X$Address
, mode = "bicycling"
, output = "all"
)
out <- data.frame(distance.text = map.dist[[1]][[1]]$distance$text
, distance.value = map.dist[[1]][[1]]$distance$value
, duration.text = map.dist[[1]][[1]]$duration$text
, duration.value = map.dist[[1]][[1]]$duration$value)
g)
cs.dist <- ddply(coffee.shops, .(Name,Address)
, .fun = function(X) {
map.dist <- mapdist(from = home
, to = X$Address
, mode = "bicycling"
, output = "all"
)
out <- data.frame(distance.text = map.dist[[1]][[1]]$distance$text
, distance.value = map.dist[[1]][[1]]$distance$value
, duration.text = map.dist[[1]][[1]]$duration$text
, duration.value = map.dist[[1]][[1]]$duration$value)
})
cs.dist <- ddply(coffee.shops, .(Name,Address)
, .fun = function(X) {
map.dist <- mapdist(from = home
, to = X$Address
, mode = "bicycling"
, output = "all"
)
out <- data.frame(distance.text = map.dist[[1]][[1]]$distance$text
, distance.value = map.dist[[1]][[1]]$distance$value
, duration.text = map.dist[[1]][[1]]$duration$text
, duration.value = map.dist[[1]][[1]]$duration$value)
})
coffee.shops <- read.csv(text = "
Name|Address
Annapurnas World Vegetarian Cafe|2201 Silver Avenue Southeast, Albuquerque, NM 87106
Dunkin Donuts|1902 Central Avenue Southeast, Albuquerque, NM 87106
Flying Star Cafe|3416 Central Avenue Southeast, Albuquerque, NM 87106
Limonata|3220 Silver Avenue Southeast, Albuquerque, NM 87106
Satellite Coffee|2300 Central Avenue Southeast, Albuquerque, New Mexico 87106
Satellite Coffee|3513 Central Avenue Northeast, Albuquerque, NM 87106
Starbucks|3400 Central Avenue Southeast, Albuquerque, NM 87106
Winning Coffee Co.|111 Harvard Drive Southeast, Albuquerque, NM 87106
", sep = "|", strip.white = TRUE, stringsAsFactors = FALSE)
coffee.shops
cs.dist <- ddply(coffee.shops, .(Name,Address)
, .fun = function(X) {
map.dist <- mapdist(from = home
, to = X$Address
, mode = "bicycling"
, output = "all"
)
out <- data.frame(distance.text = map.dist[[1]][[1]]$distance$text
, distance.value = map.dist[[1]][[1]]$distance$value
, duration.text = map.dist[[1]][[1]]$duration$text
, duration.value = map.dist[[1]][[1]]$duration$value)
})
distQueryCheck()
map.center <- data.frame(lon = -106.6133, lat = 35.0811)
map.coffee <- geocode(cs.dist$Address)
map.coffee
cs.dist2 <- cbind(cs.dist, map.coffee)
df.home <- data.frame("Math&Stat"
, "University of New Mexico"
, NA, NA, NA, NA
, home[1]
, home[2])
colnames(df.home) <- colnames(cs.dist2)
cs.dist3 <- rbind(cs.dist2, df.home)
map <- get_googlemap(
center = as.numeric(map.center)
, zoom = 15 # larger is closer
, maptype = "roadmap" # map type
, markers = cs.dist3[,c("lon","lat")] # markers for map
, scale = 2
)
p <- ggmap(map
, extent = "device" # remove white border around map
, darken = 0
)
p <- p + geom_rect(data = cs.dist3, aes(xmin = lon, ymin = lat
, xmax = lon+.004, ymax = lat+.001
, fill = duration.value
, colour = distance.value
), size = 1)
p <- p + geom_text(data = cs.dist3, aes(x = lon, y = lat
, label = Name)
p <- p + geom_text(data = cs.dist3, aes(x = lon, y = lat
, label = Name)
, hjust = 0, vjust = -1, size = 3, colour = "white")
p <- p + geom_text(data = cs.dist3, aes(x = lon, y = lat, label = Name, hjust = 0, vjust = -1, size = 3, colour = "white")
p <- p + theme( panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
p <- p + labs(title = "UNM Bike to Coffee shops")
print(p)
p <- ggmap(map, extent = "device", darken = 0)
p <- p + geom_rect(data = cs.dist3, aes(xmin = lon, ymin = lat, xmax = lon+.004, ymax = lat+.001, fill = duration.value, colour = distance.value), size = 1)
p <- p + geom_text(data = cs.dist3, aes(x = lon, y = lat, label = Name, hjust = 0, vjust = -1, size = 3, colour = "white")
p <- p + geom_text(data = cs.dist3, aes(x = lon, y = lat, label = Name), hjust = 0, vjust = -1, size = 3, colour = "white")
p <- p + geom_text(data = cs.dist3, aes(x = lon, y = lat, label = Name)
, hjust = 0, vjust = -1, size = 3, colour = "white")
print(p)
p <- p + theme( panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
p <- p + labs(title = "UNM Bike to Coffee shops")
print(p)
str(crime)
violent_crimes <- subset(crime, ((offense != "auto theft")
& (offense != "theft")
& (offense != "burglary")))
# rank violent crimes
violent_crimes$offense <- factor(violent_crimes$offense
, levels = c("robbery", "aggravated assault"
, "rape", "murder"))
# restrict to downtown
violent_crimes <- subset(violent_crimes, ((-95.39681 <= lon)
& (lon <= -95.34188)
& (29.73631 <= lat)
& (lat <= 29.784)))
map <- get_map( location = "Houston TX"
, zoom = 14
, maptype = "roadmap"
, color = "bw" # make black & white so color is data
)
p <- ggmap(map)
p <- p + geom_point(data = violent_crimes
, aes(x = lon, y = lat, size = offense, colour = offense))
p <- p + theme( legend.position = c(0.0, 0.7) # put the legend inside the plot area
, legend.justification = c(0, 0)
, legend.background = element_rect(colour = F, fill = "white")
, legend.key = element_rect(fill = F, colour = F)
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
print(p)
p <- ggmap(map)
overlay <- stat_density2d(data = violent_crimes
, aes(x = lon, y = lat, fill = ..level.. , alpha = ..level..)
, size = 2, bins = 4, geom = "polygon")
p <- p + overlay
p <- p + scale_fill_gradient("ViolentnnCrimennDensity")
p <- p + scale_alpha(range = c(0.4, 0.75), guide = FALSE)
p <- p + guides(fill = guide_colorbar(barwidth = 1.5, barheight = 10))
#p <- p + inset(grob = ggplotGrob(ggplot() + overlay + theme_inset())
# , xmin = -95.35836, xmax = Inf, ymin = -Inf, ymax = 29.75062)
print(p)
p <- p + facet_wrap( ~ day, nrow = 2)
print(p)
library(ggplot2)
library(plyr)
troops <- read.table("http://stat405.had.co.nz/data/minard-troops.txt", header=T)
cities <- read.table("http://stat405.had.co.nz/data/minard-cities.txt", header=T)
russia <- map_data("world", region = "USSR")
p <- ggplot(troops, aes(long, lat))
p <- p + geom_polygon(data = russia, aes(x = long, y = lat, group = group)
, fill = "white")
p <- p + geom_path(aes(size = survivors, colour = direction, group = group)
, lineend = "round")
p <- p + geom_text(data = cities, aes(label = city), size = 3)
p <- p + scale_size(range = c(1, 6)
, breaks = c(1, 2, 3) * 10^5
, labels = c(1, 2, 3) * 10^5)
p <- p + scale_colour_manual(values = c("bisque2", "grey10"))
p <- p + xlab(NULL)
p <- p + ylab(NULL)
p <- p + coord_equal(xlim = c(20, 40), ylim = c(50, 60))
print(p)
library(maps)
library(ggplot2)
library(plyr)
newmexico <- map("county", regions = "new mexico", plot = FALSE, fill = TRUE)
newmexico <- fortify(newmexico)
newmexico <- ddply(newmexico, "subregion", function(df)f
mutate(df, fake = rnorm(1))
g)
newmexico <- map("county", regions = "new mexico", plot = FALSE, fill = TRUE)
newmexico <- fortify(newmexico)
newmexico <- ddply(newmexico, "subregion", function(df){}
mutate(df, fake = rnorm(1))
})
newmexico <- map("county", regions = "new mexico", plot = FALSE, fill = TRUE)
newmexico <- fortify(newmexico)
newmexico <- ddply(newmexico, "subregion", function(df){
mutate(df, fake = rnorm(1))
})
p <- ggplot(newmexico, aes(x = long, y = lat, group = group, fill = fake))
p <- p + geom_polygon(colour = "white", size = 0.3)
print(p)
library(ggmap)
p <- qmap(
New Mexico
, zoom = 7, maptype =
satellite
, legend =
topleft
)
p <- qmap('New Mexico', zoom = 7, maptype = satellite, legend = topleft)
p <- qmap('New Mexico', zoom = 7, maptype = 'satellite', legend = 'topleft')
p <- p + geom_polygon(data = newmexico
, aes(x = long, y = lat, group = group, fill = fake)
, color =
white
, alpha = .75, size = .2)
p <- p + geom_polygon(data = newmexico
, aes(x = long, y = lat, group = group, fill = fake)
, color = 'white'
, alpha = .75, size = .2)
cities <- c("Albuquerque NM", "Las Cruces NM", "Rio Rancho NM", "Santa Fe NM",
"Roswell NM", "Farmington NM", "South Valley NM", "Clovis NM",
"Hobbs NM", "Alamogordo NM", "Carlsbad NM", "Gallup NM", "Los Alamos NM")
cities_locs <- geocode(cities)
cities_locs$city <- cities
p <- p + geom_text(data = cities_locs, aes(label = city)
, color =
yellow
, size = 3)
print(p)
cities_locs$city <- cities
p <- p + geom_text(data = cities_locs, aes(label = city)
, color = 'yellow'
, size = 3)
print(p)
cities_locs$city <- cities
p <- p + geom_text(data = cities_locs, aes(label = city)
, color = 'yellow'
, size = 2)
print(p)
p <- p + geom_text(data = cities_locs, aes(label = city)
, color = 'yellow'
, size = 3)
print(p)
NMcrime <- read.csv("http://statacumen.com/teach/SC1/SC1_16_crimemapping_Theft2013Q1.csv"
, header = FALSE, skip = 11, stringsAsFactors = FALSE
, col.names = c("Type", "Description", "Case", "Location", "Agency", "Date"))
NMcrime$CityState <- "Albuquerque NM"
NMcrime$Address <- paste(NMcrime$Location, NMcrime$CityState)
# geocode the lat/lon, though geocode returns lon/lat (for x,y order)
# Note, I include "warning=FALSE, message=FALSE" in the knitr options
# to supress all the Google Maps API messages in the output.
ll.NMcrime <- geocode(NMcrime$Address)
NMcrime2 <- cbind(NMcrime, ll.NMcrime)
# Since it takes a while to geocode many addresses,
# save this output to a file that can be read in conveniently as you
# develop the code below.
write.csv(NMcrime2, fn.NMcrime2, row.names = FALSE)
}
write.csv(NMcrime2, fn.NMcrime2, row.names = FALSE)
write.csv(NMcrime2, file = "NMcrime2.csv")
NMcrime2 <- NMcrime2[-which(NMcrime2$lon == max(NMcrime2$lon)),]
NMcrime2$Description
NMcrime2$Description <- factor(NMcrime2$Description)
day.temp <- weekdays(as.Date(NMcrime2$Date, format = "%m/%d/%Y %H:%M"))
NMcrime2$day <- factor(day.temp, levels = rev(unique(day.temp)), ordered = TRUE)
# time of day
time.temp <- as.POSIXct(NMcrime2$Date, format = "%m/%d/%Y %H:%M")
# convert time to 6-hour blocks
NMcrime2$time <- cut(as.POSIXlt(time.temp)$hour, c(0,6,12,18,24))
map <- get_map( location = "Lomas/Girard Albuquerque NM"
, zoom = 14
, maptype = "roadmap"
, color = "bw" # make black & white so color is data
)
p <- ggmap(map)
p <- p + geom_point(data = NMcrime2
, aes(x = lon, y = lat, colour = Description)
, alpha = 0.5, size = 2
, position = "jitter")
print(p)
p <- ggmap(map)
p <- p + scale_x_continuous(expand = c(0.05, 0)) # expand axes 5%
p <- p + scale_y_continuous(expand = c(0.05, 0)) # before creating the overlay
overlay <- stat_density2d(data = NMcrime2
, aes(x = lon, y = lat, fill = ..level.. , alpha = ..level..)
, size = 1, bins = 10, geom = "polygon")
p <- p + overlay
p <- p + scale_fill_gradient("Density")
p <- p + scale_alpha(range = c(0.1, 0.3), guide = FALSE)
p <- p + guides(fill = guide_colorbar(barwidth = 1.5, barheight = 16))
p <- p + geom_point(data = NMcrime2
, aes(x = lon, y = lat, colour = Description)
, alpha = 0.5, size = 2
, position = "jitter")
p <- p + labs(title = "Burglary and theft 2013 Q1")
print(p)
p1 <- p + facet_wrap( ~ day, nrow = 2)
p1 <- p1 + labs(title = "Burglary and theft 2013 Q1, by weekday")
print(p1)
p2 <- p + facet_wrap( ~ time, nrow = 2)
p2 <- p2 + labs(title = "Burglary and theft 2013 Q1, by time of day")
print(p2)
setwd("C:/Users/kane.de/Documents/RPackages/Crime Data")
library(maps)
library(ggplot2)
library(plyr)
fn.NMcrime2 <- "C:/Users/kane.de/Documents/RPackages/Crime Data"
if (file.exists(fn.NMcrime2)) {
# if this file exists, then weve already done the geocode(),
# just read the file
NMcrime2 <- read.csv(fn.NMcrime2, stringsAsFactors = FALSE)
} else {
# otherwise, read the original file and do the geocode() and write the file
NMcrime <- read.csv("http://statacumen.com/teach/SC1/SC1_16_crimemapping_Theft2013Q1.csv"
, header = FALSE, skip = 11, stringsAsFactors = FALSE
, col.names = c("Type", "Description", "Case", "Location", "Agency", "Date"))
NMcrime$CityState <- "Albuquerque NM"
NMcrime$Address <- paste(NMcrime$Location, NMcrime$CityState)
# geocode the lat/lon, though geocode returns lon/lat (for x,y order)
# Note, I include "warning=FALSE, message=FALSE" in the knitr options
# to supress all the Google Maps API messages in the output.
ll.NMcrime <- geocode(NMcrime$Address)
NMcrime2 <- cbind(NMcrime, ll.NMcrime)
# Since it takes a while to geocode many addresses,
# save this output to a file that can be read in conveniently as you
# develop the code below.
write.csv(NMcrime2, file = "NMcrime2.csv")
}

library(ggmap)
library(mapproj)
get_googlemap(urlonly = TRUE)
ggmap(get_googlemap())
d <- function(x=-95.36, y=29.76, n,r,a){
round(data.frame(
lon = jitter(rep(x,n), amount = a),
lat = jitter(rep(y,n), amount = a)
), digits = r)
}
df <- d(n=50,r=3,a=.3)
map <- get_googlemap(markers = df, scale = 2)
ggmap(map)
ggmap(map, fullpage = TRUE) +
geom_point(aes(x = lon, y = lat), data = df, size = 3, colour = "black")
library(scales) # for muted graphics
str(crime)
data<-crime
View(data)
violent_crimes <- subset(crime, ((offense != "auto theft")
& (offense != "theft")
& (offense != "burglary")))
# rank violent crimes
violent_crimes$offense <- factor(violent_crimes$offense
, levels = c("robbery", "aggravated assault"
, "rape", "murder"))
violent_crimes <- subset(violent_crimes, ((-95.39681 <= lon)
& (lon <= -95.34188)
& (29.73631 <= lat)
& (lat <= 29.784)))
map <- get_map( location = "Houston TX"
, zoom = 14
, maptype = "roadmap"
, color = "bw" # make black & white so color is data
)
p <- ggmap(map)
p <- p + geom_point(data = violent_crimes
, aes(x = lon, y = lat, size = offense, colour = offense))
p <- p + theme( legend.position = c(0.0, 0.7) # put the legend inside the plot area
, legend.justification = c(0, 0)
, legend.background = element_rect(colour = F, fill = "white")
, legend.key = element_rect(fill = F, colour = F)
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
print(p)
p <- ggmap(map)
overlay <- stat_density2d(data = violent_crimes
, aes(x = lon, y = lat, fill = ..level.. , alpha = ..level..)
, size = 2, bins = 4, geom = "polygon")
p <- p + overlay
p <- p + scale_fill_gradient2("Violent Crime Density", low = "white", mid = "yellow", high = "red")
p <- p + scale_alpha(range = c(0.4, 0.75), guide = FALSE)
p <- p + guides(fill = guide_colorbar(barwidth = 1.5, barheight = 10))
#p <- p + inset(grob = ggplotGrob(ggplot() + overlay + theme_inset())
# , xmin = -95.35836, xmax = Inf, ymin = -Inf, ymax = 29.75062)
print(p)
p <- p + facet_wrap( ~ day, nrow = 2)
print(p)
tr <- read.csv("C:/Users/Derek/Documents/R Scripts/Recomendation Engine/Movies.csv")
View(tr)
na.omit(tr)
View(tr)
tr <- na.omit(tr)
View(tr)
tr[tr$user==1,]
head(tr)
tr[tr$user==Michele,]
tr[tr$user=='Michele',]
tr[tr$Users=='Michele',]
g<-acast(tr, Users ~ Movie)
setwd("C:/Users/Derek/Documents/R Scripts/Recomendation Engine/")
library(recommenderlab)
library(reshape2)
library(ggplot2)
tr <- read.csv("C:/Users/Derek/Documents/R Scripts/Recomendation Engine/Movies.csv")
tr <- na.omit(tr)
head(tr)
tr[tr$Users=='Michele',]
g<-acast(tr, Users ~ Movie)
View(g)
class(g)
R<-as.matrix(g)
r <- as(R, "realRatingMatrix")
r
as(r, "list")     # A list
as(r, "matrix")   # A sparse matrix
head(as(r, "data.frame"))
r_m <- normalize(r)
r_m
as(r_m, "list")
image(r, main = "Raw Ratings")
image(r_m, main = "Normalized Ratings")
r_b <- binarize(r, minRating=1)
as(r_b, "matrix")
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5, minRating=1))
print(rec)
names(getModel(rec))
getModel(rec)$nn
recom <- predict(rec, r[1:nrow(r)], type="ratings")
recom
as(recom, "list")
as(r, "matrix")
as(recom, "matrix")
as(recom, "matrix")[,1:10]
rec_list<-as(recom,"list")
head(summary(rec_list))
rec_list[[2]][2]
u1<-as.data.frame(rec_list[[1]])
attributes(u1)
View(u1)
class(u1)
u1$id<-row.names(u1)
View(u1)
mydata <- read.csv("C:/Users/Derek/Documents/R Scripts/Recomendation Engine/Movies.csv")
View(mydata)
View(mydata)
newdata <- dcast(mydata, Users ~ Movie, value.var = "Rating")
View(newdata)
x = newdata[,2:7]
x[is.na(x)] = 0
item_sim = cosine(as.matrix(x))
library(reshape)
library(reshape2)
library(lsa)
x = newdata[,2:7]
x[is.na(x)] = 0
item_sim = cosine(as.matrix(x))
View(item_sim)
ItemRecommendation = function(userno)
{
#extract all the movies not rated by CHAN
userRatings = newdata[userno,]
non_rated_movies = list()
rated_movies = list()
for(i in 2:ncol(userRatings)){
if(is.na(userRatings[,i]))
{
non_rated_movies = c(non_rated_movies,colnames(userRatings)[i])
}
else
{
rated_movies = c(rated_movies,colnames(userRatings)[i])
}
}
non_rated_movies = unlist(non_rated_movies)
rated_movies = unlist(rated_movies)
#create weighted similarity for all the rated movies by CHAN
non_rated_pred_score = list()
for(j in 1:length(non_rated_movies)){
temp_sum = 0
df = item_sim[which(rownames(item_sim)==non_rated_movies[j]),]
for(i in 1:length(rated_movies)){
temp_sum = temp_sum+ df[which(names(df)==rated_movies[i])]
}
weight_mat = df*newdata[userno,2:7]
non_rated_pred_score = c(non_rated_pred_score,rowSums(weight_mat,na.rm=T)/temp_sum)
}
pred_rat_mat = as.data.frame(non_rated_pred_score)
names(pred_rat_mat) = non_rated_movies
for(k in 1:ncol(pred_rat_mat)){
newdata[userno,][which(names(newdata[userno,]) == names(pred_rat_mat)[k])] = pred_rat_mat[1,k]
}
return(newdata[userno,])
}
ItemRecommendation(1)
ItemRecommendation(2)
ItemRecommendation(1)
View(item_sim)
View(newdata)
# Set data path
setwd("C:/Users/Derek/Documents/R Scripts/Recomendation Engine/")
# If not installed, first install following three packages in R
# install.packages("recommenderlab")
library(recommenderlab)
library(reshape2)
library(ggplot2)
# Read training file along with header
tr <- read.csv("C:/Users/Derek/Documents/R Scripts/Recomendation Engine/Movies.csv")
tr <- na.omit(tr)
head(tr)
tr[tr$Users=='Michele',]
g <- acast(tr, Users ~ Movie)
View(g)
# Convert the dataframe into a cross tab through the reshape2 package.
g <- acast(tr, Users ~ Movie)
# Check the class of g
class(g)
# Convert the class as a matrix, if needed.
R <- as.matrix(g)
View(g)
r <- as(R, "realRatingMatrix")
r
r_m <- normalize(r)
r_m
as(r_m, "list")
r_m
rec=Recommender(r[1:nrow(r)],method="UBCF", param=list(normalize = "Z-score",method="Cosine",nn=5, minRating=1))
print(rec)
names(getModel(rec))
getModel(rec)$nn
dim(r)
recom <- predict(rec, r[1:nrow(r)], type="ratings")
recom
as(recom, "list")
rec_list<-as(recom,"list")
head(summary(rec_list))
rec_list[[2]][2]
rec_list<-as(recom,"list")
head(summary(rec_list))
u1<-as.data.frame(rec_list[[1]])
attributes(u1)
class(u1)
View(u1)
attributes(u1)
# Create a column by name of id in data frame u1 and populate it with row names
u1$id <-row.names(u1)
u1
View(u1)
View(u1)
u1[u1$id=='Matrix',1]
tr[tr$Users=='Michele',]
View(tr)
View(g)

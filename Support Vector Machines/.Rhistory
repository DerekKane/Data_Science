install.packages("randomForest")
install.packages("randomForest")
install.packages("caret")
install.packages("devtools")
install.packages('ggplot2')
install.packages('sqldf')
install.packages('forecast')
install.packages('plyr')
install.packages('RODBC')
install.packages('lubridate')
install.packages('reshape2')
install.packages('randomForest')
install.packages('XLConnect')
install.packages('xlsx')
install.packages('survival')
install.packages('shiny')
install.packages('ggmap')
install.packages('rJava')
install.packages('ROCR')
install.packages('DAAG')
install.packages('party')
install.packages('rpart')
install.packages('partykit')
install.packages('RWeka')
install.packages('evtree')
install.packages('C50')
install.packages('caret')
install.packages('e1071')
install.packages('tm')
install.packages('wordcloud')
install.packages('SnowballC')
install.packages('GGally')
install.packages('car')
install.packages('corrplot')
install.packages('languageR')
install.packages('Design')
install.packages('TTR')
install.packages('rattle')
install.packages('arules')
install.packages('doParallel')
install.packages('foreach')
install.packages('foreign')
install.packages('gclus')
install.packages('lattice')
install.packages('MASS')
install.packages('nnet')
install.packages('parallel')
install.packages('pROC')
install.packages('Rfacebook')
install.packages('RgoogleMaps')
install.packages('ROCR')
install.packages('survival')
install.packages('quantmod')
install.packages('h2o')
install.packages('glmnet')
install.packages('car')
install.packages('GA')
install.packages('UsingR')
install.packages('Imap')
install.packages('genalg')
install.packages('animation')
install.packages('earth')
install.packages('devEMF')
install.packages("ROAuth")
install.packages("twitteR")
install.packages("sentiment")
install.packages("Rstem")
install.packages("httr")
install.packages("base64enc")
install.packages("Rfacebook")
install.packages("Rook")
install.packages("igraph")
install.packages("RMySQL")
install.packages("googleVis")
install.packages("opencpu")
install.packages('shiny')
install.packages('markdown')
install.packages("shinythemes")
install.packages("shinydashboard")
install.packages("htmlwidgets")
# Big Data packages
install.packages("rhdfs")
install.packages("rmr2")
install.packages("rhbase")
install.packages("RHbase")
install.packages("rHBase")
install.packages("RHive")
library("RMySQL")
mydb = dbConnect(MySQL(), user='root', password='Rooster1', dbname='datascience', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='rooster1', dbname='datascience', host='localhost')
dbListTables(mydb)
rs = dbSendQuery(mydb, "select * laptop")
rs = dbSendQuery(mydb, "SELECT * FROM laptop")
data = fetch(rs, n=-1)
View(data)
rs = dbSendQuery(mydb, "SELECT * FROM bankcustomerdetail")
data = fetch(rs, n=-1)
View(data)
sort( sapply(ls(),function(x){object.size(get(x))}))
object.size(x=lapply(ls(), get))
print(object.size(x=lapply(ls(), get)), units="Mb")
print(object.size(x=lapply(ls(), get)), units="Gb")
library(RODBC)
library(RMySQL)
# Connect to MySQL and bring in the bank attrition dataset.
MySQLServer = dbConnect(MySQL(), user='root', password='rooster1', dbname='datascience', host='localhost')
# Save as a results set
rs = dbSendQuery(MySQLServer, "SELECT * FROM bank_attrition")
mydata = fetch(rs, n=-1)
library(caret)
library(rpart)
library(C50)
library(rattle)
library(party)
library(partykit)
library(randomForest)
library(ROCR)
library(ggplot2)
library(reshape2)
library(car)
library(corrplot)
library(e1071)
mydata$CUST_ID <- NULL
mydata$SEX <- NULL
mydata$MARRIED <- NULL
mydata$EDUCATION <- NULL
mydata$JOB <- NULL
mydata$REGION <- NULL
mydata$OWN_RENT <- NULL
set.seed(1234)
ind <- sample(2, nrow(mydata), replace=TRUE, prob=c(0.7, 0.3))
trainData <- mydata[ind==1,]
testData <- mydata[ind==2,]
mylogit <- glm(Attrition ~ CHILDREN + YOJ + INCOME + TIME_AT_ADDRESS, data = trainData, family = "binomial")
summary(mylogit)
confint(mylogit)
## CIs using standard errors
confint.default(mylogit)
## Put the coefficients and CI in a format onto a useful scale.
exp(mylogit$coefficients)
exp(confint(mylogit))
## odds ratios only
exp(coef(mylogit))
## odds ratios and 95% CI
exp(cbind(OR = coef(mylogit), confint(mylogit)))
testData$YHat1 <- predict(mylogit, testData, type="response")
View(testData)
Predict <- function(t) ifelse(LogisticModel > t , 1,0) #t is the threshold for which the confusion
confusionMatrix(Predict(0.5), testData$Churn) # Logistic Regression
LogisticModel <- predict(mylogit, testData, type="response")
Predict <- function(t) ifelse(LogisticModel > t , 1,0) #t is
confusionMatrix(Predict(0.5), testData$Churn) # Logistic Reg
pred1 <- prediction(testData$YHat1, testData$Churn)
View(testData)
confusionMatrix(Predict(0.02), testData$Churn) #
Predict <- function(t) ifelse(LogisticModel > t , 1,0) #t is the threshold for which the confusion
confusionMatrix(Predict(0.02), testData$Churn) # Logistic Regression
confusionMatrix(Predict(0.02), testData$Attrition)
confusionMatrix(Predict(0.03), testData$Attrition) # Logistic Regression
RandomForestModel <- randomForest(y=trainData$Attrition, x=trainData[,-5], ntree=1, mtry=5, importance=TRUE)
importance(RandomForestModel)
print(RandomForestModel)
plot.new()
varImpPlot(RandomForestModel, type=1, pch=19, col=1, cex=1.0, main="")
abline(v=45, col="blue")
library(RODBC)
library(RMySQL)
# Connect to MySQL and bring in the bank attrition dataset.
MySQLServer = dbConnect(MySQL(), user='root', password='rooster1', dbname='datascience', host='localhost')
# Save as a results set
mydata <- dbReadTable(MySQLServer, "bank_attrition")
mydata2 <- mydata
# mydata$CUST_ID <- NULL
mydata$SEX <- NULL
mydata$MARRIED <- NULL
mydata$EDUCATION <- NULL
mydata$JOB <- NULL
mydata$REGION <- NULL
mydata$OWN_RENT <- NULL
mydata$Attrition <- NULL
na.omit(mydata)
mydata1b <- as.data.frame(scale(mydata[2:5], center = TRUE, scale = TRUE))
mydata1b$CUST_ID <- mydata$CUST_ID
View(mydata1b)
km.cluster <- kmeans(mydata1b, 5, nstart=25)
km.cluster <- kmeans(mydata1b[1:4], 5, nstart=25)
km.cluster$size
km.cluster$centers
mydata1b$cluster <- km.cluster$cluster
View(mydata1b)
rm(list = ls())
# Set working Directory
setwd("C:/Users/dkane/Documents/R Scripts/Clustering/")
# Load the data
mydata <- read.csv("RFMCustomer.csv", stringsAsFactor=FALSE, header=FALSE)
setwd("C:/Users/Derek/Documents/RPackages/Support Vector Machines")
setwd("C:/Users/Derek/Documents/RPackages/Support Vector Machines")
setwd("C:/Users/Derek/Documents/RPackages/Support Vector Machines")
setwd("C:/Users/Derek/Documents/R Scripts/Support Vector Machines")
mydata <- read.csv("breastcancer.csv")
library(e1071)
mydata$Class <- as.factor(mydata$Class)
set.seed(1234)
ind <- sample(2, nrow(mydata), replace=TRUE, prob=c(0.7, 0.3))
trainData <- mydata[ind==1,]
testData <- mydata[ind==2,]
SVMModel <- svm(Class ~ Clump.Thickness + Uniformity.of.Cell.Size +
Uniformity.of.Cell.Shape+ Marginal.Adhesion +
Single.Epithelial.Cell.Size + Bare.Nuclei +
Bland.Chromatin + Normal.Nucleoli + Mitoses,
data = trainData, gamma=0.01, cost=1)
print(SVMModel)
summary(SVMModel)
View(mydata)

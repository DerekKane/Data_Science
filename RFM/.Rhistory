library(ggmap)
library(mapproj)
get_googlemap(urlonly = TRUE)
ggmap(get_googlemap())
d <- function(x=-95.36, y=29.76, n,r,a){
round(data.frame(
lon = jitter(rep(x,n), amount = a),
lat = jitter(rep(y,n), amount = a)
), digits = r)
}
df <- d(n=50,r=3,a=.3)
map <- get_googlemap(markers = df, scale = 2)
ggmap(map)
ggmap(map, fullpage = TRUE) +
geom_point(aes(x = lon, y = lat), data = df, size = 3, colour = "black")
library(scales) # for muted graphics
str(crime)
data<-crime
View(data)
violent_crimes <- subset(crime, ((offense != "auto theft")
& (offense != "theft")
& (offense != "burglary")))
# rank violent crimes
violent_crimes$offense <- factor(violent_crimes$offense
, levels = c("robbery", "aggravated assault"
, "rape", "murder"))
violent_crimes <- subset(violent_crimes, ((-95.39681 <= lon)
& (lon <= -95.34188)
& (29.73631 <= lat)
& (lat <= 29.784)))
map <- get_map( location = "Houston TX"
, zoom = 14
, maptype = "roadmap"
, color = "bw" # make black & white so color is data
)
p <- ggmap(map)
p <- p + geom_point(data = violent_crimes
, aes(x = lon, y = lat, size = offense, colour = offense))
p <- p + theme( legend.position = c(0.0, 0.7) # put the legend inside the plot area
, legend.justification = c(0, 0)
, legend.background = element_rect(colour = F, fill = "white")
, legend.key = element_rect(fill = F, colour = F)
, panel.grid.major = element_blank()
, panel.grid.minor = element_blank()
, axis.text = element_blank()
, axis.title = element_blank()
, axis.ticks = element_blank()
)
print(p)
p <- ggmap(map)
overlay <- stat_density2d(data = violent_crimes
, aes(x = lon, y = lat, fill = ..level.. , alpha = ..level..)
, size = 2, bins = 4, geom = "polygon")
p <- p + overlay
p <- p + scale_fill_gradient2("Violent Crime Density", low = "white", mid = "yellow", high = "red")
p <- p + scale_alpha(range = c(0.4, 0.75), guide = FALSE)
p <- p + guides(fill = guide_colorbar(barwidth = 1.5, barheight = 10))
#p <- p + inset(grob = ggplotGrob(ggplot() + overlay + theme_inset())
# , xmin = -95.35836, xmax = Inf, ymin = -Inf, ymax = 29.75062)
print(p)
p <- p + facet_wrap( ~ day, nrow = 2)
print(p)
rm(list = ls())
setwd("C:/Users/Derek/Documents/R Scripts/RFM")
mydata <- read.csv("RFMCustomer.csv", stringsAsFactor=FALSE, header=FALSE)
View(mydata)
library(lubridate)
library(data.table)
library(ggplot2)
library(grid)
names(mydata) <- c("Date", "OrderNumber", "CustomerId","ProductId", "Value")
View(mydata)
View(mydata)
mydata$ParsedDate <- fast_strptime(mydata$Date, "%m/%d/%Y")
#mydata$ParsedDate <- as.Date(mydata$Date, "%m/%d/%Y")
NOW <- fast_strptime("2015-10-20", "%Y-%m-%d")
R_table <- aggregate(ParsedDate ~ CustomerId, mydata, FUN=max) # Calculate R
View(mydata)
View(R_table)
rm(list = ls())
# Set working Directory
setwd("C:/Users/Derek/Documents/R Scripts/RFM")
mydata <- read.csv("RFMCustomer.csv", stringsAsFactor=FALSE, header=FALSE)
library(lubridate)
library(data.table)
library(ggplot2)
# library(grid)
names(mydata) <- c("Date", "OrderNumber", "CustomerId","ProductId", "Value")
mydata$ParsedDate <- fast_strptime(mydata$Date, "%m/%d/%Y")
NOW <- fast_strptime("2015-10-20", "%Y-%m-%d")
R_table <- aggregate(ParsedDate ~ CustomerId, mydata, FUN=max) # Calculate R
View(R_table)
